<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>烟雨任平生的博客</title>
    <description></description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 02 Nov 2017 00:00:52 +0800</pubDate>
    <lastBuildDate>Thu, 02 Nov 2017 00:00:52 +0800</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>使用cookie进行模拟登陆和动态抓取网页</title>
        <description>&lt;p&gt;爬虫有时候困难的地方，在于两点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;模拟登陆&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;抓取动态网页&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;越来越多的网页，如果需要看到，都必须要登陆才能看到，所以我们要爬取某些内容的话，都要进行模拟登陆，模拟登陆有很多的方法，这里我就说两个。&lt;/p&gt;

&lt;p&gt;1，提交用户名和密码登陆，找到login的 url， 分析需要提交的表单，其中包括：用户名，密码，还有验证码(大多数情
况下都需要)，而且现在的验证码方式千奇百怪，各种各种，碰到传统的图片中的文字，还好解决，碰到其他的，真是一头
包。&lt;/p&gt;

&lt;p&gt;2，使用cookie登陆，首先，我们要理解什么是cookie？很多网站，为了维持登陆状态，都会采用回话session进行实现，每次网站后台都会确认是不是已经登陆的客户，但是我又不能每次都让用户输入账户密码，所以，就要在用户端的cookie中，保存着用户的信息，每次用户要执行request，都会把cookie一起提交过去，服务端就会在用户提交的cookie中确定用户的信息。那么我们模拟登陆的办法就来了：1，cookie是存在客户端的，我们可以获取到。2，我们可以在请求的时候，把cookie数据一起提交，以达到让服务器认为我们已经登陆的消息。&lt;/p&gt;

&lt;p&gt;所以我们可以采用cookie登陆的方式，进行模拟登陆，但是cookie一般是由过期时间的，所以我们就要去维护cookie的持久性。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;另外一点，为了更好的用户体验，动态的加载网页，只更新需要更新的数据，大多数网站采用了Ajax的技术，异步加载的方式进行网页更新，这就对我们的爬虫产生了挑战，因为你要抓取的数据，可能是不在网页中的，那么我们就要去在网页中分析，Ajax请求的网页的url，然后用爬虫的方式，去获取该要的数据。&lt;/p&gt;

&lt;p&gt;这一点，我们就要去分析js的脚本，去看看这个url究竟在哪里，去哪里请求。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;以上两点，我就以知乎为力，写一个我的个人主页中，系统自动推送给我的那一页的问题和答案，用到使用cookie登陆和抓取动态网页这两个常用的东西。&lt;/p&gt;

&lt;p&gt;github仓库地址：&lt;/p&gt;
</description>
        <pubDate>Fri, 27 Oct 2017 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2017/10/27/%E4%BD%BF%E7%94%A8cookie%E8%BF%9B%E8%A1%8C%E6%A8%A1%E6%8B%9F%E7%99%BB%E9%99%86%E5%92%8C%E5%8A%A8%E6%80%81%E6%8A%93%E5%8F%96%E7%BD%91%E9%A1%B5.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2017/10/27/%E4%BD%BF%E7%94%A8cookie%E8%BF%9B%E8%A1%8C%E6%A8%A1%E6%8B%9F%E7%99%BB%E9%99%86%E5%92%8C%E5%8A%A8%E6%80%81%E6%8A%93%E5%8F%96%E7%BD%91%E9%A1%B5.html</guid>
        
        
      </item>
    
      <item>
        <title>Redis 入门与理解</title>
        <description>&lt;p&gt;Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。&lt;/p&gt;

&lt;p&gt;Redis通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Map), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。&lt;/p&gt;

&lt;p&gt;所谓Key-Value数据库，也就是所存储的数据，全部都是以Key-Value的形式来存储。在Redis里面，没有table的概念，当然你也可以把table当做key来看待。&lt;/p&gt;

&lt;p&gt;Redis里面，都是key，每一个key，对应一个value，其中，value可以包含以下几种数据类型。&lt;/p&gt;

&lt;p&gt;key-string&lt;/p&gt;

&lt;p&gt;key-hash（有些叫map，也可以理解成是python里面的dic）&lt;/p&gt;

&lt;p&gt;key-list&lt;/p&gt;

&lt;p&gt;key-set&lt;/p&gt;

&lt;p&gt;key-sorted set&lt;/p&gt;

&lt;p&gt;Redis命令，提供了大量的对于Key-Value操作的函数，我们可以通过redis-cli客户端进行操作和查询。&lt;/p&gt;

&lt;p&gt;另外一点，Redis提供了多种语言的API，如果我们队Python比较熟悉，可以下载和安装redis-py的模块，进行redis的操作。&lt;/p&gt;

&lt;p&gt;附注：&lt;/p&gt;

&lt;p&gt;redis的安装：&lt;/p&gt;

&lt;p&gt;$ wget http://download.redis.io/releases/redis-4.0.2.tar.gz&lt;/p&gt;

&lt;p&gt;$ tar xzf redis-4.0.2.tar.gz&lt;/p&gt;

&lt;p&gt;$ cd redis-4.0.2&lt;/p&gt;

&lt;p&gt;$ make&lt;/p&gt;

&lt;p&gt;启动redis服务：redis-server&lt;/p&gt;

&lt;p&gt;启动redis客户端： redis-cli&lt;/p&gt;

&lt;p&gt;redis-py的安装：&lt;/p&gt;

&lt;p&gt;$ pip install redis&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Oct 2017 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2017/10/25/Redis%E5%85%A5%E9%97%A8%E4%B8%8E%E7%90%86%E8%A7%A3.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2017/10/25/Redis%E5%85%A5%E9%97%A8%E4%B8%8E%E7%90%86%E8%A7%A3.html</guid>
        
        
      </item>
    
      <item>
        <title>用数据讲故事-分析中国的古诗词</title>
        <description>&lt;p&gt;爬取中国古诗文，进行分析，看看古诗文中到底写了什么东西&lt;/p&gt;

&lt;p&gt;此项目只要分为两大块:&lt;/p&gt;

&lt;hr /&gt;

&lt;center&gt;数据的爬取

data_download: 此目录为一个以Scrapy框架结构的爬虫,主要从网站上自动爬取古诗文的内容


----


&lt;center&gt;数据的分析

data_analyze: 此目录为使用NLTK和jieba分词库进行数据的筛选和清洗,以及分词和标注,还有数据展示

----



如果链接打不开，请直接访问我的github，谢谢。

![](https://github.com/Wenchao21/song_lrc_analyze)
&lt;/center&gt;&lt;/center&gt;
</description>
        <pubDate>Tue, 24 Oct 2017 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2017/10/24/%E7%94%A8%E6%95%B0%E6%8D%AE%E8%AE%B2%E6%95%85%E4%BA%8B-%E5%88%86%E6%9E%90%E4%B8%AD%E5%9B%BD%E7%9A%84%E5%8F%A4%E8%AF%97%E8%AF%8D.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2017/10/24/%E7%94%A8%E6%95%B0%E6%8D%AE%E8%AE%B2%E6%95%85%E4%BA%8B-%E5%88%86%E6%9E%90%E4%B8%AD%E5%9B%BD%E7%9A%84%E5%8F%A4%E8%AF%97%E8%AF%8D.html</guid>
        
        
      </item>
    
      <item>
        <title>Python中的super</title>
        <description>&lt;h4 id=&quot;super-super--mro-&quot;&gt;&lt;strong&gt;反正一句话： 不要一说到 super 就想到父类！super 指的是 MRO 中的下一个类！&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;首先必须要理解MRO&lt;/p&gt;

&lt;p&gt;其次再去理解多继承&lt;/p&gt;

&lt;p&gt;再次要去理解新式类&lt;/p&gt;

&lt;p&gt;最后在做一下实践，才能理解super&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c&quot;&gt;#先说一点：如果是我写，坚决不用super了，我更想用类名加方法名去调用，这样我认为是最直接的，知道哪个类里面的方法。&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#切记一个人的代码不要两者混用，到时候自己都搞不清楚。&lt;/span&gt;



&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;#上述两段代码有什么区别吗？嘿嘿，应该是没有区别，一点区别都没有！这个是最简单的继承，如果类之间的继承复杂起来了呢？&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;#既然没有区别，那么为什么还要用super呢？看下面的代码&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#首先必须要理解MRO&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#其次再去理解多继承&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#再次要去理解新式类&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#最后在做一下实践，才能理解super&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;#总结一下： 直接用类名加方法名去调用，显示更直接，也更方便方法的查找，如果用super，这里就是关键了，super在调用的时候，是MRO的顺序来寻找方法的，不一定是父类的方法。&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#不行了，越说越多了，已经讲不完了。今天先写到这里，后面再补充。先抄上知乎上的一段话，讲的很不错。&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#不要一说到 super 就想到父类！super 指的是 MRO 中的下一个类！&lt;/span&gt;

      


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;__main__&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__mro__&lt;/span&gt;


&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&amp;gt;, &amp;lt;class &#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&amp;gt;, &amp;lt;class &#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&amp;gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &amp;lt;class &#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&amp;gt;, &amp;lt;class &#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&amp;gt;, &amp;lt;class &#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&amp;gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &amp;lt;type &#39;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&amp;gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;





&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 02 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2017/03/02/Python-%E4%B8%AD%E7%9A%84super.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2017/03/02/Python-%E4%B8%AD%E7%9A%84super.html</guid>
        
        
      </item>
    
      <item>
        <title>解决pycharm中无法正确导入模块问题</title>
        <description>&lt;p&gt;在创建了一个Scrapy项目之后，我把这个项目放在了一个目录下，变成了：&lt;/p&gt;

&lt;p&gt;Folder/scrapy_project&lt;/p&gt;

&lt;p&gt;当我在scrapy_project的spider的目录中，创建一个spider文件，当在这个spider文件中，尝试使用from scrapy_project import items的时候，IDE找不到 scrapy_project这个package，经过反复的排查，也看了一下scrapy_project中也有__init__.py这个文件啊，为什么就找不到呢？&lt;/p&gt;

&lt;p&gt;于是我就打开的python console，在spider目录中去导入，发现没有任何问题，可以正常导入，只是在IDE（pycharm）中找不到这个文件，后来发现是因为pycharm的setting问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果你用ide直接打开scrapy_project这个目录，记得，是项目的目录，并不是Folder这个目录，这个from scrapy_project import item是可以被找到的。&lt;/li&gt;
  &lt;li&gt;如果你用IDE打开了scrapy_project上一级的目录，Folder这个目录，那么是找不到的，那么如何做呢？答案是你把scrapy_project这个项目目录，make as sources root目录，这样就可以正确查找。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;原理：&lt;/p&gt;

&lt;p&gt;在你把项目目录设置层sources root， 这个package文件，将会被添加到sys.path的这个路径下，那么当你正确的from xx import xx的时候，from将会从sys.path这个路径中找到这个scrapy_project这个package，那么久可以正常导入。这个问题，一定要对python的import机制进行深入的了解才行，后面我会把这个写的更明白，这次先把IDE中无法import问题解决。&lt;/p&gt;

</description>
        <pubDate>Wed, 22 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2017/02/22/%E8%A7%A3%E5%86%B3%E4%B8%80%E4%B8%AApycharm%E4%B8%AD%E6%97%A0%E6%B3%95%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%97%E9%97%AE%E9%A2%98.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2017/02/22/%E8%A7%A3%E5%86%B3%E4%B8%80%E4%B8%AApycharm%E4%B8%AD%E6%97%A0%E6%B3%95%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%97%E9%97%AE%E9%A2%98.html</guid>
        
        
      </item>
    
      <item>
        <title>字符编码和字符集的来龙去脉</title>
        <description>&lt;p&gt;当时做了一个用requests去爬取dotamax上的英雄使用次数和胜率，出现了一个爬取下来的数据，如果是中文的话，在windows下的cmd中查看是乱码问题，我敢肯定，这是字符编码问题，为了彻底搞明白这个字符集和字符编码，我就在这里进行一个总结，先讲一个故事，这样理解更深刻。&lt;/p&gt;

&lt;p&gt;两个人说话，必须使用同一种语言，不同语言，都能表达同一个意思，但是对方听不懂，所以需要翻译。计算机的字符的表示，也是一样的。
字符集（你可以看做是英语，法语，中文）常见的包括：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ASCII&lt;/li&gt;
  &lt;li&gt;ISO 8859-1&lt;/li&gt;
  &lt;li&gt;Unicode&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;那么好了，都说中文，也不一定听的懂了？因为有各地的方言，河南话，上海话，还有普通话。于是，就有了字符编码。
字符编码(你可以看做是普通话，河南话，上海话)常见的包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;UTF-8&lt;/li&gt;
  &lt;li&gt;UTF-16&lt;/li&gt;
  &lt;li&gt;UTF-32&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那么在这个世界上为了方便沟通，便有人规定了，好了，现在全世界只准用中文讲话（Unicode），而且必须是普通话（UTF-8）。 所以这就解释了，为什么UTF-8解决了你的大多数沟通（编码）问题。&lt;/p&gt;

&lt;p&gt;好的，直接看代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#coding = utf-8&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://dotamax.com/player/hero/255619340/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;那么，下面来看我遇到的问题，我在爬取了dotamax上的信息之后，虽然我在dota.py这个文件中生命code的编码是UTF-8，但是这个是code的编码，就是你的代码编码，那么我如果在python自带的python gui里面运行时什么结果呢？中文是可以正常显示的，那么我如果用windows下的cmd执行的话，会是什么结果呢？结果就是乱码。&lt;/p&gt;

&lt;p&gt;分析如下：&lt;/p&gt;

&lt;p&gt;第三句代码打印了下载下载的res的编码，结果是UTF-8，ok，原来这个网页说的语言是“中文啊”（UTF-8，Unicode的一种），好的，那么我们用python自带的python gui执行的时候，我们去查看一下python gui能识别什么编码格式？已查看setting，发现，这家伙也是讲“中文啊”（UTF-8，Unicode的一种），所以这里显示正常，那么，windows的cmd为什么就是乱码了呢？我们去查看一下cmd的setting，那么问题来了，这个家伙是讲“英语”（GBK，另一种字符集）的啊，他不认识中文啊，所以cmd就傻掉了，显示乱码了，那么解决办法怎么办呢？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;把网页说的“中文”转换成“英语”，ｃｍｄ就可以正常沟通了。&lt;/li&gt;
  &lt;li&gt;把ｃｍｄ的“英语”转换成“中文”， 网页也可以正常沟通了。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;到这里，你应该彻底明白编码问题了，顺着这个思路，我想在字符集和字符编码上，你不会再遇到其他问题了，因为了解了本质，一切都好说。&lt;/p&gt;

&lt;p&gt;转载请说明出处，原创。嘿嘿&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2017/02/21/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E7%9A%84%E6%9D%A5%E9%BE%99%E5%8E%BB%E8%84%89.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2017/02/21/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E7%9A%84%E6%9D%A5%E9%BE%99%E5%8E%BB%E8%84%89.html</guid>
        
        
      </item>
    
      <item>
        <title>关于后面的博客内容</title>
        <description>&lt;p&gt;前面的博客大多写了语言上的基础知识，从这里开始，将会对真正的应用上面遇到的问题，在这里进行总结和发布，对于自己职业的规划，只要面向下面几个方向，大多是是用python进行实践。&lt;/p&gt;

&lt;p&gt;我将后续的学习和总结分为三个系列：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Python Web系列，主要根据自己当前做的项目进行总结&lt;/li&gt;
  &lt;li&gt;Python 爬虫系列， 主要是用Scrapy进行数据的爬取总结&lt;/li&gt;
  &lt;li&gt;Python 自然语言处理系列，主要是NLP方面的学习&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Web方面，将会使用Flask以及Flask某些常用插件的学习，还有自己去设计Restful api，以及数据的存储，HTTP协议，前端尽量少些点吧，如果有时间的话，会写点。项目：ＵＸ的数据录入管理系统。&lt;/p&gt;

&lt;p&gt;爬虫方面，将会熟练使用Requests库，还要Srapy框架的使用，了解分布式，多线程方面的爬虫，主要去做一点模拟浏览器登陆，还有动态网页的抓取这两方面，另外多注意反扒网站的抓取。项目：动态爬取搜房网上海外环新房信息&lt;/p&gt;

&lt;p&gt;自然语言处理，将会使用NLTK，还有一些中文分词库，先进行一些简单的了解学习，学习一下数学方法和公式，以及常用的算法分析，尽量去对文本的分词，标注，情感分析进行训练，后面慢慢的进行模型训练。项目：尝试去分析酷我流行音乐前50名歌手的前20首歌词内容进行分析，50x20=1000首歌曲分析。&lt;/p&gt;

&lt;p&gt;我始终相信，编程语言只是工具，分析方法和思路，才是解决问题的关键，所以我会在每一篇文章前面，都会对思路和情景，进行总结和分析。&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2017/02/21/%E5%85%B3%E4%BA%8E%E5%90%8E%E9%9D%A2%E7%9A%84%E5%8D%9A%E6%96%87.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2017/02/21/%E5%85%B3%E4%BA%8E%E5%90%8E%E9%9D%A2%E7%9A%84%E5%8D%9A%E6%96%87.html</guid>
        
        
      </item>
    
      <item>
        <title>Python类中所有的方法详解</title>
        <description>&lt;p&gt;Python的静态方法和类成员方法都可以被实例和类调用，区别如下。&lt;/p&gt;

&lt;p&gt;1）静态方法第一个参数不用传入self，可以理解为function。&lt;/p&gt;

&lt;p&gt;2）类成员方法需传入代表本类的cls参数；&lt;/p&gt;

&lt;p&gt;3）静态方法是无法访问实例变量的，而类成员方法也同样无法访问实例变量，但可以访问类变量；&lt;/p&gt;

&lt;p&gt;4）我把print看做静态方法，不知道可靠不？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c&quot;&gt;# coding=utf-8&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 关于python里面的方法,有必要做一下系统的整理&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# python里面的方法分为两类:  静态方法,类成员方法&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 请看如下代码&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;this is val1&#39;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;this is a instance val2&#39;&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;normalmethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val2&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val3&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dd&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val4&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@staticmethod&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;staticfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;this is a static method!&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv2&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@classmethod&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;classmethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;this is a class method&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val1&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 实例化一个变量做测试,并且传入一个字符串,作为变量&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 这个变量被__init__()方法调用,用来初始化这个对象&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;classtest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;val3 value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# 在类中,普通定义一个方法,也成实例方法,只有实例化一个对象之后,才能有这个实例来调用&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 实例方法可以直接访问实例的实例变量(self.val2,self.val3,self.val4)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 所有的成员变量,都可以作为他的参数来调用&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 顾名思义,实例方法,只能被一个实例调用,定义的时候,第一个参数必须是self&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;classtest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normalmethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;this is a dd value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;#正确调用&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ClassTest.normalmethod(&quot;this is a test&quot;)      #错误调用&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 用@staticmethod装饰器来定义的方法,成为静态方法&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 静态方法无法访问类中的一切变量,你可以理解为这个是独立存在的。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 静态方法,可以被实例调用,也可以被类调用&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 说是调用,不如说: 静态方法前面的实例,还有类,只是指定这个方法的作用域&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;classtest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;staticfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;aaaa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bbbbbb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;#正确调用&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ClassTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;staticfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ccccc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dddddd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;#正确调用,我会强烈使用这个&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 用@classmethod装饰器定义的方法,称作类方法,只能调用类变量,无法调用实例变量。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 传进去的第一个参数,必须是cls,即这个类的名字。&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;classtest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;classmethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;#正确调用&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ClassTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;classmethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;#正确调用,我会强烈使用这个。&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# 注意:这里的名词和使用习惯,我是采用和ruby对比的方法记忆的&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 为了不让两种语言在我脑子中乱掉,尽量采用相似的记忆方法。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 如果你没有在python里面这些名词的叫法,请参考下ruby,谢谢。不正确的,请指正。&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 19 Sep 2016 06:53:54 +0800</pubDate>
        <link>http://yourdomain.com/2016/09/19/Python%E7%B1%BB%E4%B8%AD%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/09/19/Python%E7%B1%BB%E4%B8%AD%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3.html</guid>
        
        
      </item>
    
      <item>
        <title>如何去搭建这个博客</title>
        <description>&lt;p&gt;此处的资料，全为自己平时的自学，以及在我们几个好朋友群里面讨论的东西，有正确的，有不正确的，如果有什么高见，请email给我：hewenchao21@163.com。
海纳百川，有容乃大；壁立千仞，无欲则刚。&lt;/p&gt;

&lt;p&gt;本博客制作流程和原理概要：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 原理：&lt;/strong&gt;
          采用Jekyll框架创建博客，然后部署到github上面。Github上的Gitpage，后台采用的引擎便是Jekyll，所以在本地创建好博客工程后，可以直接往Github上部署，然后单独购买域名，将自己的域名，指向自己的博客，所以你可以直接访问域名，来达到访问博客的目的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 名词解释&lt;/strong&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Jekyll：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用ruby开发的一个web框架，主要用来生成一些简单的静态web网页，为用户快速打造一个简单的站点，十分轻量级，很简单。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Github：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个用来托管代码的一个host，你可以将你的代码和一些开源项目push上去，github上托管有非常多的开源项目。总之就是一个提供代码托管服务的平台。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Github Page：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个免费提供可以部署Jekyll开发的博客项目。后台引擎采用的是Jekkly，所以只要把工程push上去，即可访问自己的网页。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Markdown：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Markdown格式的文件，你可以当做和word一样的东西，是一种文本书写格式。提供更为优美的书写格式。Jekyll的post采用的就是Markdown格式的文件。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 制作流程：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;生成本地工程&lt;/strong&gt;&lt;/p&gt;

    &lt;h5 id=&quot;ruby&quot;&gt;&lt;strong&gt;安装ruby&lt;/strong&gt;&lt;/h5&gt;

    &lt;p&gt;官网下载和安装ruby，linux一般已经集成ruby，请在终端输入ruby -v以检测ruby的安装,如果显示ruby的版本，则安装成功&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby	
 ruby -v
&lt;/code&gt;&lt;/p&gt;

    &lt;h5 id=&quot;jekyll&quot;&gt;&lt;strong&gt;安装Jekyll&lt;/strong&gt;&lt;/h5&gt;

    &lt;p&gt;jekyll是一个用ruby编写的web框架，gem是ruby的包管理工具。我们可以使用gem 来安装jekyll。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;h5 id=&quot;section&quot;&gt;&lt;strong&gt;生成博客&lt;/strong&gt;&lt;/h5&gt;

    &lt;p&gt;安装好jekyll之后，我们就可以使用这个gem来生成我们的博客了。&lt;/p&gt;

    &lt;p&gt;```ruby&lt;/p&gt;

    &lt;p&gt;jekyll new myblog&lt;/p&gt;

    &lt;p&gt;cd myblog&lt;/p&gt;

    &lt;p&gt;jekyll serve&lt;/p&gt;

    &lt;p&gt;# =&amp;gt; 打开浏览器 http://localhost:4000&lt;/p&gt;

    &lt;p&gt;```&lt;/p&gt;

    &lt;p&gt;之后，你便可以在本地的访问你的博客了。
  这里是生成的博客的目录结构，你可以在项目中随意更改你需要更改的东西。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;注册和生成远程仓库&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;购买自己的域名&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;将域名绑定博客&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 12 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2016/07/12/How-to-build-the-blog.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/07/12/How-to-build-the-blog.html</guid>
        
        
      </item>
    
      <item>
        <title>这是一篇测试文档</title>
        <description>&lt;p&gt;这个仅仅是测试我的post能不能给你正常显示。
而且也会正常显示下面这段代码。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!c:\python27\python.exe&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Copyright (c) Twisted Matrix Laboratories.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# See LICENSE for details.&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;_preamble&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ImportError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exc_clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;AttributeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# exc_clear() (and the requirement for it) has been removed from Py3&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abspath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getcwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;twisted.scripts.twistd&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aaaaa&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Fri, 24 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2016/06/24/%E8%BF%99%E6%98%AF%E4%B8%80%E7%AF%87%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/06/24/%E8%BF%99%E6%98%AF%E4%B8%80%E7%AF%87%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3.html</guid>
        
        
      </item>
    
  </channel>
</rss>
